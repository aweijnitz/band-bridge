// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  passwordHash String
  apiKeys      ApiKey[]
  bands        UserBand[]
  projects     Project[] @relation("UserProjects")
  comments     Comment[]
  sessions     Session[]
}

model Band {
  id      Int        @id @default(autoincrement())
  name    String
  members UserBand[]
  projects Project[]
}

model UserBand {
  id     Int   @id @default(autoincrement())
  user   User  @relation(fields: [userId], references: [id])
  userId Int
  band   Band  @relation(fields: [bandId], references: [id])
  bandId Int
  @@unique([userId, bandId])
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  keyHash   String   // Store only the hash of the API key
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  revokedAt DateTime?
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  band        Band?    @relation(fields: [bandId], references: [id])
  bandId      Int?
  owner       User     @relation("UserProjects", fields: [ownerId], references: [id])
  ownerId     Int
  status      ProjectStatus
  media       Media[]
}

enum ProjectStatus {
  open
  released
  archived
}

enum MediaType {
  audio
  video
  image
}

model Media {
  id          Int      @id @default(autoincrement())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  title       String
  description String?
  filePath    String
  type        MediaType
  uploadDate  DateTime @default(now())
  comments    Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  media     Media    @relation(fields: [mediaId], references: [id])
  mediaId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  text      String
  createdAt DateTime @default(now())
  time      Float?
}

model Session {
  id        Int      @id @default(autoincrement())
  sessionId String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
}
